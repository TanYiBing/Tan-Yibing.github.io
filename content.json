[{"title":"Angular6在使用antd的layout之后没有css样式","date":"2018-08-22T01:37:10.000Z","path":"2018/08/22/Angular6在使用antd的layout之后没有css样式/","text":"今天我在使用Angular6安装完antd之后，使用了layout模块，打开之后发现没有样式，最后解决方案如下：首先我们看看antd的官网：https://ng.ant.design/docs/getting-started/zh当我们开始使用之前，我们需要引入css全局样式，但是引入的位置不正确就会导致我们的模块没有样式。 解决方案是在全局样式文件style.css的开头引入antd的css @importnode_modules/ng-zorro-antd/src/ng-zorro-antd.min.css 如下图：","tags":[{"name":"Angular","slug":"Angular","permalink":"http://tanyibing.com/tags/Angular/"}]},{"title":"JS原型理解","date":"2018-08-08T15:40:45.000Z","path":"2018/08/08/JS原型、原型链/","text":"JS原型和原型链js原型js原型和原型链一直是js中一个难点，也是面试时大概率的问题，看了网上很多的说法，好像都不是那么通俗易懂。我就用简单的方式来介绍介绍，本人是前端菜鸟，说错了欢迎大家提出来。 我理解中的原型是为了继承而产生的，为了防止污染全局变量，我们可以给Person的原型加上一个sayHello方法，这也是最简单的例子（自行脑补代码），这样我们就可以在Person的实例中共享sayHello这个方法。图中的每条线其实都可以用一个属性代替，我画出来你们就一目了然了。 我们可以看到，Person构造函数可以通过prototype属性访问它自己的原型对象的，而实例化出来的对象可以通过_proto_属性访问Peroson构造函数的原型对象._proto_属性其实是非标准的属性，也就是说这是浏览器为了方便才产生的属性，为了什么方便？当然是为了调试的方便啦，所以我们还是尽量不要在代码中使用_proto_，而在调试的时候使用。 js原型链上面给的是一个简单的原型模型，我们知道，原型对象还有一个属性constructor，这个属性就是指向该对象的构造函数的。下面我们需要了解几个概念，以便我们清楚的知道原型链是什么：1.每个构造函数都有原型对象2.每个对象都会有构造函数3.每个构造函数的原型都是一个对象4.那么这个原型对象也会有构造函数5.那么这个原型对象的构造函数也会有原型对象这样就形成一个链式结构，也就是我们说的原型链 从图中我们就可以清楚的看到一个原型链结构，我们的原型其实也是个对象，对象也是由对象构造函数生成的，其实也就是之前的原型三角结构的延伸，可以看到，所有的对象的原型最顶层就是null。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://tanyibing.com/tags/JavaScript/"}]},{"title":"SEO自学笔记（五）","date":"2018-08-02T14:03:55.000Z","path":"2018/08/02/SEO自学笔记（五）/","text":"SEO自学笔记（五）今天主要的工作是优化公司官网的关键词，去外网发外链，虽然心中质疑如今外链对优化还有没有作用，但还是做了，也积累了一些国外的外链资源，有需要的小伙伴也可以私聊我，我的企鹅是820567197.言归正传，SEO抽空看了一些，只有一张笔记，发出来：","tags":[{"name":"SEO","slug":"SEO","permalink":"http://tanyibing.com/tags/SEO/"}]},{"title":"SEO自学笔记（四）","date":"2018-08-01T13:53:59.000Z","path":"2018/08/01/SEO自学笔记（四）/","text":"SEO自学笔记（四）以下是今天的自学笔记：","tags":[{"name":"SEO","slug":"SEO","permalink":"http://tanyibing.com/tags/SEO/"}]},{"title":"SEO自学笔记（三）","date":"2018-07-31T13:58:21.000Z","path":"2018/07/31/SEO自学笔记（三）/","text":"SEO自学笔记（三）自从github被微软收购之后，我用hexo来写博客就不是那么顺利了，就跟被墙一样，网站打开慢就不说了，昨晚一直hexo d命令报错，害得我把博客迁移了一遍，最后不知道怎么鬼使神差的上传好了。今天上传的时候又遇到了问题，搭了梯子才解决。在这吐槽一下，看到很多人已经把自己的项目都迁走了，感觉github的未来不是那么美好了。 言归正传，再上传一下我今天额外的SEO笔记：","tags":[{"name":"SEO","slug":"SEO","permalink":"http://tanyibing.com/tags/SEO/"}]},{"title":"SEO自学笔记（二）","date":"2018-07-31T13:40:04.000Z","path":"2018/07/31/SEO自学笔记（二）/","text":"SEO自学笔记（二）紧接着第一天的内容，今天的学习笔记如下：","tags":[{"name":"SEO","slug":"SEO","permalink":"http://tanyibing.com/tags/SEO/"}]},{"title":"SEO自学笔记（一）","date":"2018-07-30T14:28:13.000Z","path":"2018/07/30/SEO自学笔记（一）/","text":"SEO自学笔记（一）最近在工作中要求学习一些SEO的技术来给主站进行一定的优化，所以自学了SEO的一些知识，我通过xmind思维导图做了一些笔记，下面就贴出我学习的过程：","tags":[{"name":"SEO","slug":"SEO","permalink":"http://tanyibing.com/tags/SEO/"}]},{"title":"PHP中Session的清除和销毁","date":"2018-03-26T09:48:30.000Z","path":"2018/03/26/PHP中Session的清除和销毁-1/","text":"PHP中session清除和销毁今天在工作中使用session进行用户的登录验证操作，最后要进行用户注销的操作，也就是session的删除，所以查阅文档发现删除会话主要有删除单个会话、删除所有会话和结束当前会话的三种方式，以下就是三种清除session的具体方法： 1.删除单个会话删除单个会话其实就是删单个会话的变量，和数组的操作一样，直接注销$_SESSION数组的某个元素即可。例如：$_SESSION[“session_name”]变量，可以使用unset()函数，代码如下所示：unset($_SESSION[&quot;session_name&quot;]);注意：在使用unset()时，要注意$SESSION数组中的元素一定不可以可略，即不可以一次注销整个数组，这样会禁止整个会话的功能，一旦使用会将全局变量$_SESSION全局变量销毁，而且没有办法将其恢复，用户也不可能再注册$_SESSION变量，在php文档中也可以发现警告 Caution请不要使用unset($、_SESSION)来释放整个$_SESSION， 因为它将会禁用通过全局$_SESSION去注册会话变量 2.删除所有会话如果想吧某个用户在session中注册的所有变量都删除，也就是一次删除所有的会话变量，可以通过将一个空数组赋值给$_SESSION来实现，其代码显示如下：$_SESSION = array();也可以使用session_unset 来释放所有的会话变量,使用方法如下：void session_unset ( void )该函数没有返回值。 3.删除当前会话如果整个会话已经结束，首先应该注销所有会话变量，然后使用 session_destroy()函数清除结束当前的会话，并清空会话中的所有资源，彻底销毁 Session，其代码如下显示：session_destroy()；相对于 session_start() 函数 （创建 Session 文件），session_destroy()函数用来关闭 Session 的运作 （删除 Session 文件），如果成功则返回 TURE，销毁 Session 资料失败则返回 FALSE。但该函数并不会释放和当前 Session 相关的变量，也不会删除保存在客户端 Cookie 中的 Session ID 。下面是我在代码中实际使用的方法： if(isset($_SESSION['username'])){ $_SESSION = array(); if(isset($_COOKIE[session_name()])){ setcookie(session_name(),'',time()-3600); } session_destroy(); }","tags":[{"name":"php","slug":"php","permalink":"http://tanyibing.com/tags/php/"},{"name":"session","slug":"session","permalink":"http://tanyibing.com/tags/session/"}]},{"title":"从输入URL到页面渲染完成","date":"2018-02-20T10:09:24.000Z","path":"2018/02/20/从输入URL到页面渲染完成/","text":"转载自www.chauncywu.com 从输入URL到页面渲染完成原文-英文译文 推荐阅读《图解HTTP》 各种协议与HTTP协议的关系(参照该图理解下文) 0-1 1. 输入URL地址 1-1 2. 浏览器根据域名查询IP地址 2-1 从要访问的域名中获取IP地址，DNS查询的步骤如下： 从浏览器缓存中查询。浏览器会存储一定时间的DNS记录，操作系统不会告诉浏览器每个DNS记录的保存时限，不同浏览器设置保存时限为一个固定值（不同浏览器情况不同，一般在2-30分钟）。 从操作系统缓存中查询。如果浏览器中没有包含想要的缓存记录，那浏览器就会发起操作系统请求，继续查询操作系统缓存 从路由器中查询DNS缓存。请求持续发送到你的路由，它通常会有自己的DNS缓存。 从ISP中查询DNS缓存。下一个被查询地方是ISP缓存DNS的服务器。 域名服务器递归查询。首先从root域名服务器中查询如.com域名服务器，然后逐步向前查询，.com顶级域名服务器到Facebook的域名服务器。一般来说，.com级别的都已经在缓存中了，所以一般不会进行对root域名服务器的查询。下面给出一张递归查询的图。 扩展什么是DNS？DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。 DNS查询的两种方式：递归查询和迭代查询1、递归解析当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。 2-2 2、迭代解析当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。 2-3 DNS域名称空间的组织方式我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例: 2-4 3. 浏览器发送HTTP请求到web服务器向 http://facebook.com/ 发出GET请求 HTTP请求报文在请求中，HTTP报文首部由方法、URI、HTTP版本、HTTP首部字段等构成。 3-1 确保可靠性的TCP协议 3-2 扩展TCP三次握手 第一次握手： 客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认； 第二次握手： 服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。 第三次握手： 客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。 3-2-1 为什需要三次握手？《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误” 书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。 假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。 例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。 TCP四次挥手 第一次挥手： Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。 第二次挥手： Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。 第三次挥手： Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。 第四次挥手： Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。 3-2-2 为什么建立连接是三次握手，而关闭连接却是四次挥手呢？这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。 什么是反向代理？客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。 3-2-3 负责传输的IP协议 IP间的通信依赖MAC地址 ARP协议：(Address Resolution Protocol)用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址 3-3 4. Facebook服务器返回一个永久重定向响应服务器会发送一个301永久重定向响应来告诉浏览器访问 http://www.facebook.com/ 而不是 http://facebook.com/。 为什么服务器坚持重定向而不是直接给予浏览器用户需要的结果，这有很多有意思原因: 一个原因是搜索引擎排名，如果有两个URLs指向同一个页面，比如 http://www.igoro.com/ 和 http://igoro.com/ ,搜索引擎会认为这是两个不同的网站，结果他们两个每个都有一部分访问量，但是也只能拥有更低的搜索引擎排名。如果使用了301定位，搜索引擎将会识别重定向，进而将同一来源的多个链接算作一个。 另一个原因是，同样的内容多个URLs还不利于缓存，同样的内容拥有多个名字，潜在造成缓存浪费。 扩展301和302的区别：301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。 他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址换为重定向之后的网址； 302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO 302好于301 重定向原因： 网站调整（如改变网页目录结构）； 网页被移到一个新地址； 网页扩展名改变(如应用需要把.php改成.Html或.shtml)。 这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。 什么时候进行301或者302跳转呢？当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。 清晰明确而言：使用301跳转的大概场景如下： 1、 域名到期不想续费（或者发现了更适合网站的域名），想换个域名。2、 在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。3、 空间服务器不稳定，换空间的时候。 5. 浏览器会跟踪重定向地址浏览器知道了 http://www.facebook.com/ 是真正应该访问的URL，所以就发送了另外一个GET请求。 6. 服务器处理请求服务器会接收这个GET请求，并且返回一个响应结果 怎么存储数据是每个动态网站都会面临的有趣难题小网站会经常有一个SQL数据库来存储他们的数据，但是网站存储数据量过大或者流量过大后就必须将数据库分布在多台机器，解决的方法有很多种 包括sharding(在主键基础上划分表到多个数据库中)，复制和使用简化的弱语义一致性数据库 推迟一些任务到批处理作业是廉价保持数据更新的的一种技术。例如，Facebook必须尽快更新新闻供应，但数据支持的“你可能认识的人”功能可能只需要每晚进行更新（作者猜测是这样）。批处理作业的更新导致存在一些旧的相对不重要的数据，但是使数据更新更快更简单。 7.服务器返回一个HTML响应123456789101112HTTP/1.1 200 OKCache-Control: private, no-store, no-cache, must-revalidate, post-check=0, pre-check=0Expires: Sat, 01 Jan 2000 00:00:00 GMTP3P: CP=&quot;DSP LAW&quot;Pragma: no-cacheContent-Encoding: gzipContent-Type: text/html; charset=utf-8X-Cnection: closeTransfer-Encoding: chunkedDate: Fri, 12 Feb 2010 09:05:55 GMT... 整个完整的响应是36KB，其中大部分处理后由blob类型传送内容编码头部告诉浏览器响应体使用了gzip压缩算法。在解析blob后，你就会看到你期望的HTML了。 8. 浏览器开始渲染HTML在浏览器接收完整HTML文件前，浏览器就开始渲染页面了。 9. 浏览器发送嵌入在HTML中的对象的请求随着浏览器渲染HTML，浏览器会注意到有些标签需要请求其他URLs的资源，浏览器将会发送一个GET请求来重新获取每个文件 。 10. 浏览器发送异步请求在web2.0时代，即使在页面渲染后客户端还是持续与服务器端通信。 例如，当你的朋友上线或下线时，Facebook聊天功能将会持续更新你已经登录的朋友列表。为了更新这个列表，你浏览器上运行的JS将会发送异步请求到服务器，异步请求是发送给特殊URL的GET或POST请求。在Facebook的例子中，客户端会发送一个POST请求到 http://www.facebook.com/ajax/chat/buddy_list.php ，获取你在线的朋友列表 这个模式被称为AJAX，是“Asynchronous JavaScript And XML”,的缩写，虽然不太清楚为什么服务器必须将响应格式化为xml。 相关阅读：当你访问淘宝的时候，发生了什么？","tags":[{"name":"URL","slug":"URL","permalink":"http://tanyibing.com/tags/URL/"},{"name":"HTTP","slug":"HTTP","permalink":"http://tanyibing.com/tags/HTTP/"},{"name":"服务器","slug":"服务器","permalink":"http://tanyibing.com/tags/服务器/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://tanyibing.com/tags/计算机网络/"},{"name":"前端","slug":"前端","permalink":"http://tanyibing.com/tags/前端/"}]},{"title":"hadoop单机安装、运行","date":"2017-12-28T14:28:13.000Z","path":"2017/12/28/hadoop单机配置、运行/","text":"云计算 hadoop 配置步骤Tanyibing，this is for 14级软件工程专业，My email &#x74;&#x61;&#110;&#x79;&#105;&#x62;&#x69;&#110;&#x67;&#x31;&#57;&#x39;&#53;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109; link Hadoop环境准备工作 VMware版本VMware-workstation-full-12.5.7-5813279(版本自己选择)Xshell5自己选择是否使用 CentOS版本CentOS-6.4-x86_64-bin-DVD1(本人的是64位，其他版本未测试) Hadoop版本hadoop-2.6.0(安装完系统后直接命令行安装) jdk版本jdk-8u45-linux-x64.tar 需要了解基本的linux和vim的使用 资源位置百度网盘:https://pan.baidu.com/s/1i5s2eFF密码:n3jq CentOS镜像下载地址http://mirror.nsc.liu.se/centos-store/6.4/isos/x86_64/ VMware安装以及CentOS安装VMware安装步骤省略 CentOS安装1.点击新建虚拟机 2.选择稍后操作系统 3.选择64位CentOS的系统 4.选择安装位置(最好不要放C盘) 5.默认配置就好，点击下一步 6.点击自定义硬件 7.配置虚拟机的内存，我们的实验1G即可，电脑好的选择2G也可 8.选择虚拟化cpu(使用本机真实cpu) 9.选择加载的镜像，选1盘，如果自己下载的话2盘是一些软件，不需要加载 10.桥接和NAT模式才能上网，我选择的是桥接(使用自己的真实网卡) 11.选择第一个选项(安装或升级系统) 12.这一步选skip跳过即可 13.选择简体中文，点击下一步 14.选择英国美式，下一步 15.选择默认的基本存储设备，下一步 16.必须选择是，忽略所有数据 17.默认就行，下一步 18.自己输入密码（6位，字母数字），选择无论如何使用(因为我设置的密码不是安全的) 19.为了更好的了解linux，现在进行分盘(挂载点) 20.首先分给/home 2G(选择空闲点击创建，然后挂载点选/home) 21.必须给/boot一定的空间(系统使用，及时其他出现问题也能正常开机，一般200M即可) 22.接着给swap分4G空间(不是在挂载点选择，而是在文件系统类型选择) 23.最后所有空间都分给 / 挂载点(根目录) 24.选择将修改写入磁盘，点击下一步 25.默认即可，下一步 26.由于minimal存在一些兼容问题，选择Basic Server版本，点击下一步进行安装 27.安装完成，点击重新引导，重启虚拟机 28.先输入用户名：root 回车，接着输入密码(密码是不显示的，输入完回车就行) 29.现在一个虚拟机就终于安装完成了 jdk、hadoop的解压1.将jdk解压到 /opt 下 tar -zxvf jdk-8u45-linux-x64.tar.gz -C /opt 注意如果你的虚拟机自带openjdk需要先卸载 rpm -qa | grep java //检查机器上的jdk 应该显示这一类的结果： java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64 javapackages-tools-3.4.1-11.el7.noarch java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64 使用下面的命令删除上面列出的内容： rpm -e --nodeps + 上面出现的内容 2.将hadoop解压到 /opt/hadoop 下 tar -zxvf hadoop-2.6.0-x64.tar.gz -C /opt/hadoop 没有hadoop目录的自己在/opt下创建 在/root /hadoop/目录下，建立tmp、hdfs/name、hdfs/data目录，执行如下命令： mkdir /opt/hadoop/tmp mkdir /opt/hadoop/hdfs mkdir /opt/hadoop/hdfs/data mkdir /opt/hadoop/hdfs/name ##ssh的安装、无密码配置 1.检查 CentOS 默认已安装了 SSH client、SSH server，打开终端执行如下命令进行检验： rpm -qa | grep ssh 成功显示出client、server版本的话则无需安装，若需要安装，则可以通过 yum 进行安装（安装过程中会让你输入 [y/N]，输入 y 即可）： sudo yum install openssh-clients sudo yum install openssh-server 接着执行如下命令测试一下 SSH 是否可用： ssh localhost 此时会有提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码，就登陆到本机了。 2.ssh无密码配置 上面这样登陆是需要每次输入密码的，我们需要配置成SSH无密码登陆比较方便。 首先输入 exit 退出刚才的 ssh，就回到了我们原先的终端窗口，然后利用 ssh-keygen 生成密钥，并将密钥加入到授权中： exit # 退出刚才的 ssh localhost cd ~/.ssh/ # 若没有该目录，请先执行一次ssh localhost ssh-keygen -t rsa # 会有提示，都按回车就可以 cat id_rsa.pub &gt;&gt; authorized_keys # 加入授权 chmod 600 ./authorized_keys # 修改文件权限 此时再用 ssh localhost 命令，无需输入密码就可以直接登陆了。 jdk、hadoop的配置1.环境变量的配置 vim /etc/profile加入如下配置： export JAVA_HOME=/opt/jdk1.8.0_45 export HADOOP_HOME=/opt/hadoop/hadoop-2.6.0 exportCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar: exportPATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin: 保存后，不要忘记执行如下命令使配置生效： source /etc/profile 2.hosts文件的修改 vim /etc/hosts最后加入如下内容： 127.0.0.1 自己的主机名 3.hadoop配置 进入/opt/hadoop/hadoop-2.6.0/etc/hadoop目录 1)在hadoop-env.sh和 yarn-env.sh的开头添加如下环境变量(一定要添加) export JAVA_HOME=/opt/jdk1.8.0_45 2)配置core-site.xml &lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;description&gt;HDFS的URI，文件系统://namenode标识:端口号&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/opt/hadoop/tmp&lt;/value&gt; &lt;description&gt;namenode上本地的hadoop临时文件夹&lt;/description&gt; &lt;/property&gt; &lt;/configuration&gt; 3)配置hdfs-site.xml &lt;configuration&gt; &lt;!—hdfs-site.xml--&gt; &lt;property&gt; &lt;name&gt;dfs.name.dir&lt;/name&gt; &lt;value&gt;/opt/hadoop/hdfs/name&lt;/value&gt; &lt;description&gt;namenode上存储hdfs名字空间元数据 &lt;/descriptio&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.data.dir&lt;/name&gt; &lt;value&gt;/opt/hadoop/hdfs/data&lt;/value&gt; &lt;description&gt;datanode上数据块的物理存储位置&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;description&gt;副本个数，配置默认是3,应小于datanode机器数量&lt;/description&gt; &lt;/property&gt; &lt;/configuration&gt; 4)配置yarn-site.xml &lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt; &lt;value&gt;${yarn.resourcemanager.hostname}:8099&lt;/value&gt; &lt;/propert&gt; &lt;/configuration&gt; #####4)配置mapred-site.xml 目录下没有mapred-site.xml，只有mapred-site.xml.template(模板)，所以将其复制重命名为mapred-site.xml: cp mapred-site.xml.template mapred-site.xml 然后再配置mapred-site.xml: &lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 5)配置yarn-site.xml &lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt; &lt;value&gt;${yarn.resourcemanager.hostname}:8099&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 启动hadoop1.格式化namenode hadoop namenode -format 2.启动hadoop start-all.sh 3.启动验证 jps 应该输出如下的结果: 在浏览器输入虚拟机的ip地址，例如：192.168.31.0:50070，能够打开如下网页： 至此，hadoop环境安装已经全部完成 hadoop下运行MapReduce代码在此，使用WordCount的旧版api版本演示 1.编写WordCount.java,包含Mapper类和Reducec类 import java.io.IOException; import java.util.StringTokenizer; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.Path; import org.apache.hadoop.io.IntWritable; import org.apache.hadoop.io.LongWritable; import org.apache.hadoop.io.Text; import org.apache.hadoop.mapreduce.Job; import org.apache.hadoop.mapreduce.Mapper; import org.apache.hadoop.mapreduce.Reducer; import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; import org.apache.hadoop.mapreduce.lib.input.TextInputFormat; import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat; public class WordCount { public static class WordCountMap extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; { private final IntWritable one = new IntWritable(1); private Text word = new Text(); public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException { String line = value.toString(); StringTokenizer token = new StringTokenizer(line); while (token.hasMoreTokens()) { word.set(token.nextToken()); context.write(word, one); } } } public static class WordCountReduce extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; { public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) throws IOException, InterruptedException { int sum = 0; for (IntWritable val : values) { sum += val.get(); } context.write(key, new IntWritable(sum)); } } public static void main(String[] args) throws Exception { Configuration conf = new Configuration(); Job job = new Job(conf); job.setJarByClass(WordCount.class); job.setJobName(&quot;wordcount&quot;); job.setOutputKeyClass(Text.class); job.setOutputValueClass(IntWritable.class); job.setMapperClass(WordCountMap.class); job.setReducerClass(WordCountReduce.class); job.setInputFormatClass(TextInputFormat.class); job.setOutputFormatClass(TextOutputFormat.class); FileInputFormat.addInputPath(job, new Path(args[0])); FileOutputFormat.setOutputPath(job, new Path(args[1])); job.waitForCompletion(true); } } 2.编译WordCount.java文件 javac WordCount.java -d 指定到你希望的目录下 此时目录下应该多出三个文件：WordCount.class、WordCount$WordCountMap.class、WordCount$WordCountReduce.class 3.将以上的.class文件打包成.Jar文件 jar -cvf 你希望指定的名字.jar *.class 4.创建hadoop的input和output目录 hadoop fs -mkdir input hadoop fs -mkdir output 5.将要输入的文件放进input目录下 hadoop fs -put 你要放入计算的文件 input 6.hadoop运行Jar文件并计算结果 hadoop jar WordCount.Jar WordCount input/file output (hadoop jar jar包路径 执行的主函数名(主类名，main方法所在类名) 输入目录名 输出目录名) 7.查看结果(前提是不报错，成功运行完) 成功的话，output目录下会出现一个part-r-xxxx hadoop fs cat output/part-r-00000 #查看提交的结果 附(xshell5、VMware tools使用安装)VMware Tools可以让虚拟机和你的主机之间共享一个文件夹,具体操作不在此赘述，点击链接自行按教程安装VMware Tools安装 Xshell可以方便开发,具体操作不在此赘述，点击链接自行按教程安装Xshell安装","tags":[{"name":"hadoop","slug":"hadoop","permalink":"http://tanyibing.com/tags/hadoop/"},{"name":"java","slug":"java","permalink":"http://tanyibing.com/tags/java/"},{"name":"VMware","slug":"VMware","permalink":"http://tanyibing.com/tags/VMware/"},{"name":"Windows","slug":"Windows","permalink":"http://tanyibing.com/tags/Windows/"}]},{"title":"Hello World","date":"2017-12-25T02:28:13.000Z","path":"2017/12/25/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"http://tanyibing.com/tags/hexo/"}]}]